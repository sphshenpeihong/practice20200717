server:
  port: 8125
  servlet:
    context-path: /${spring.application.name}
  max-http-header-size: 102400
      
eureka:
  client:
    serviceUrl:
      defaultZone: http://10.252.176.13:8110/eureka/

spring:
  redis:
    host: 10.252.176.6
    port: 6380
    password: foobared
    timeout: 3000
    database: 0
    jedis:
      pool:
        max-idle: 8
        min-idle: 0
        max-active: 8
        max-wait: -1

  cache:
    type: redis
    cache-names: security
    redis:
      time-to-live: 30s
      key-prefix: security
  kafka:
    bootstrap-servers: 10.252.176.13:9092
    listener:
      concurrency: 1
    consumer:
      group-id: groupapi
      enable-auto-commit: true
      auto-commit-interval: 100
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
    producer:
      retries: 0
      batch-size: 4096
      buffer-memory: 40960000
      key-serializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      value-serializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
  outerkafka:
    bootstrap-servers: 10.252.176.13:9092
    listener:
      concurrency: 1
    consumer:
      group-id: groupapi
      enable-auto-commit: true
      auto-commit-interval: 100
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      retries: 0
      batch-size: 4096
      buffer-memory: 40960000
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  main:
    allow-bean-definition-overriding: true

sharding:
  jdbc:
    datasource:
      names: master #不支持_命名
      master:  # 数据源master->逻辑命名
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://10.252.176.6:3306/security_center?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=true
        username: root
        password: secuSeCu@!#
        initialSize: 1
        # max-idle不再使用，配置了也没用
        maxActive: 20
        minIdle: 1
        maxWait: 3600000
        poolPreparedStatements: false
        maxPoolPreparedStatementPerConnectionSize: 20
        maxOpenPreparedStatements: -1
        validationQuery: select 1 from dual;
        validationQueryTimeout: 30000
        # 申请连接时执行validation-query检测连接是否有效，开了之后安全性提高，性能会降低
        testOnBorrow: false
        # 归还连接时执行validation-query检测连接是否有效，开了之后安全性提高，性能降低
        testOnReturn: false
        # 申请连接的时候检测，如果空闲时间大于time-betwen-eviction-runs-millis，执行validation-query检测连接是否有效
        testWhileIdle: true
        timeBetweenEvictionRunsMillis: 1800000
        # 物理连接初始化的时候执行的sql
        connectionInitSqls: select database();
        # 默认的Filter，可以另外自定义Filter配置
        filters: stat,wall
    config: 
      props: 
        sql.show: false
      sharding: 
        tables: 
          security_info: 
            actual-data-nodes: master.security_info_20200${1..9},master.security_info_2020${10..12} #数据节点,3.0.0以下的版本要先建表，不然会报错
            table-strategy:
              complex: #复合查询策略
                sharding-columns: id,created_at,event_id
                algorithm-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.SecurityInfoAlgorithm
          security_item: 
            actual-data-nodes: master.security_item_20200${1..9},master.security_item_2020${10..12}
            table-strategy: 
              complex: 
                sharding-columns: id,created_at,event_id
                algorithm-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.SecurityItemAlgorithm
          check_result_x:
            actual-data-nodes: master.check_result_x_20200${1..9},master.check_result_x_2020${10..12}
            table-strategy: 
              complex: 
                sharding-columns: id,msg_send_time
                algorithm-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.CheckResultXAlgorithm
          check_result_bomb:
            actual-data-nodes: master.check_result_bomb_20200${1..9},master.check_result_bomb_2020${10..12}
            table-strategy: 
              complex: 
                sharding-columns: id,msgSendTime
                algorithm-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.CheckResultBombAlgorithm
          check_result_liquid:
            actual-data-nodes: master.check_result_liquid_20200${1..9},master.check_result_liquid_2020${10..12}
            table-strategy: 
              complex: 
                sharding-columns: id,msgSendTime
                algorithm-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.CheckResultLiquidAlgorithm
        default-key-generator-class-name: com.grgbanking.security.centeradmin.web.config.algorithm.IdGenerator
        binding-tables: 
          - security_info,security_item #绑定表
                
logback:
  #非开发环境是否开启控制台日志
  enableConsoleLogWhenNotInDev: false
  #**日志文件存放目录，目录后面无需再加"/"。备注如果这项不配置，则不输出日志文件
  logFileDir: /data/logs

# 文件共享目录
security:
  shareDir:
    #base-path: D:\data\kafka\
    base-path: /mnt #文件共享目录映射到本地目录
    share-path: /grg/img #以共享目录为根目录
    extension: .jpg
  api:
    base-path: /data/faceImg/test
    server-url: http://10.252.176.6:8088/faceImg
    user:
      station-svg:  #svg文件目录
        path: /station-svg
mybatis:
  type-aliases-package: com.grgbanking.security.adminuser.model.pojo.entity
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    lazy-loading-enabled: true
    jdbc-type-for-null: null
    multiple-result-sets-enabled: true

judgment:
  auto-switch: NUCTECH   # IFLYTEK | NUCTECH